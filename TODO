It looks like you're describing a project where you need to set up a specific infrastructure using Docker Compose. This infrastructure includes several services like NGINX, WordPress with php-fpm, and MariaDB, all running in dedicated containers. You also need to create Dockerfiles for each service and handle volumes, networking, and restart behavior.

Here's an outline of the steps you can follow to accomplish this project:

*** Choose a Base Image: Decide whether you'll use the penultimate stable version of Alpine or Debian as the base image for your services. This choice will influence the content of your Dockerfiles.

*** Create Dockerfiles: Write a Dockerfile for each of your services (NGINX, WordPress + php-fpm, MariaDB). Each Dockerfile should start with the chosen base image and then include the necessary installation and configuration steps for the specific service. Remember to include any required dependencies and set up the appropriate user accounts.

*** Build Docker Images: Use the docker build command to build the Docker images based on the Dockerfiles you've created. Use a Makefile to automate this process, ensuring that you build the images from scratch rather than pulling pre-built images.

*** Compose File (docker-compose.yml): Create a docker-compose.yml file to define your entire infrastructure. This file will specify the services, networks, and volumes that need to be set up.

yaml
Copy code
version: '3'
services:
  nginx:
    build:
      context: ./nginx
    restart: always

  wordpress:
    build:
      context: ./wordpress
    restart: always

  mariadb:
    build:
      context: ./mariadb
    restart: always

volumes:
  wordpress-db:
  wordpress-files:

networks:
  your-network:
*** Networking: In the docker-compose.yml file, define the your-network network to connect your services. This will enable them to communicate with each other using their service names as hostnames.

*** Volumes: Define the wordpress-db and wordpress-files volumes in the docker-compose.yml file. These volumes will be used to persist the WordPress database and website files, respectively.

*** Container Restart: The restart: always setting in the docker-compose.yml file ensures that containers are restarted in case of a crash or system reboot.

*** TLS for NGINX: Configure your NGINX service to use TLSv1.2 or TLSv1.3 for secure communication. You'll need to include SSL certificates in the NGINX container.

*** Makefile: Create a Makefile that automates the build and run processes for your Docker containers. This includes building the Docker images using the Dockerfiles you've written.

*** Start the Infrastructure: Run the docker-compose up command to start your infrastructure. This will create and run the containers according to your specifications in the docker-compose.yml file.

*** Access Services: After the containers are up and running, you can access NGINX, WordPress, and MariaDB through their respective ports. NGINX will handle incoming requests and proxy them to the WordPress service.

Remember to follow best practices for security and efficiency while setting up your services and writing Dockerfiles. Additionally, review Docker's documentation on networking, volumes, and Docker Compose for more detailed information on how to implement each aspect of your project.